Go apps 101
How to build & test them 
20 Oct 2019

Adelina Simion
Software Engineer (Backend), Deliveroo
adelina.simion@deliveroo.co.uk
@DeliverooEng
@classic_addetz

* About me
Software engineer, Back-End at Deliveroo, London 

- M.Sc. Mathematical Modelling & Computing from Technical University of Denmark
- Living in London 5 years ðŸ‡¬ðŸ‡§
- Java for 5 years, Go for 1 year or so 
- First time running a workshop

.image images/deliveroo_logo_2.png _ 600

* About Deliveroo
13 markets
we deliver food from restaurants to consumer
screenshot of the app
3 groups - consumer, restaurant, rider
work on projects to make the consumer experience better
talk about Go ramp up
a little bit about checkout architecture
restaurant list is in Go

* Go at Deliveroo

* Workshop goals 
We will spend the next 3 or so hours together learning *Go* fundamentals and experimenting with *Go* apps. 
The workshop will be modular, with each section building on top of the previous one. 

At the end, you will have built: 

- An app which saves food orders to an in-memory database 
- An app which presents food orders via REST
- An app which is easy to extend and is well tested 

.image images/gopher_go.png _ 450

* Agenda 
- Discuss Go fundamentals as needed
- Setup and explore the repo starting point 
- Implement the order processing app -  `Order` model, `OrderRepo` and `OrderService`  
- Present our orders via REST and think about our error cases
- Unit testing & mock generation of the app
- Round up & finish off the day 

.image images/gopher_jumping.gif _ 250

* Setup 
- Setup your GO environment 
- Setup `$GOPATH`
- Setup `$GO111MODULE`
- Clone our repo in your `GOPATH` 
- Develop with any IDE you prefer

.link https://golang.org/doc/install golang.org/doc/install
.link https://github.com/addetz/api_testing_go github.com/addetz/api_testing_go

.image images/go_logo.png _ 350

* Exercise - Hello, world!
Letâ€™s test our Go setup by running `cmd/hello_world.go`
.play exercises/hello.go
Run your code with 
.code exercises/ex_go_run_hello.go
.image https://media.giphy.com/media/MeAJb6e5Obb8Y/giphy.gif

* What we will build 
.image images/app_diagram.png

* Keywords
The following are *reserved* keywords in Go. 

.code fundamentals/go_keywords.go
.image https://media.giphy.com/media/xT9KVuimKtly3zoJ0Y/giphy.gif

* Primitives 
.code fundamentals/go_primitives.go
.image https://media.giphy.com/media/umehzEQ4uJdfO/giphy.gif _ 300

* Printing primitives
We format & print strings using the `fmt` package, which we might have already seen in the `hello_world` example. 
Print statements use verbs which are usually preceded by `%`.

.play fundamentals/go_print.go /START OMIT/,/END OMIT/
.image https://media.giphy.com/media/gw3IWyGkC0rsazTi/giphy.gif _ 250

* Zero values
Variables declared without an explicit initial value are given their zero value.
The zero value is:

- `0` for numeric types,
- `false` for the boolean type, and
- `""` (the empty string) for strings.

.play fundamentals/go_zero.go /START OMIT/,/END OMIT/

* Declaring variables
As previously mentioned variables that are not initialized get a _zero_ value.
There are 3 ways to initialize variables in Go:

.play fundamentals/go_var_init.go

* Structs - the building blocks of Go
We can define our own types in Go using _structs_.

- A struct is an aggregate data type that groups together zero or more named values of arbitrary types as a single entity
- Each value is called a _field_
- All of these fields are collected into a _single_ _entity_ that can be copied as a unit, passed to functions, stored in arrays etc.

_Structs_ may have 0 or more fields. 
.code fundamentals/go_structs.go

* Exported vs unexported names
In Go, a name is exported if it begins with a capital letter. 
For example, `Pi` is exported from the `math` package.

.play fundamentals/go_exported_names.go

When importing a package, you can refer only to its exported names. 
Any "unexported" names are not accessible from outside the package.

* Exercise  - Define Item struct
Fill in `models/item.go` with new fields.
.code exercises/ex_define_item.go
Uncomment `models/item_define_test.go` and run it to see it pass.
.code exercises/ex_define_item_test_run.go

We will discuss testing later, but passing tests ensure we are on the same page.
.image https://media.giphy.com/media/143vPc6b08locw/giphy.gif _ 250

* Initializing Structs 
Structs are initialized in an analogous way to primitive variables. 

.play fundamentals/go_struct_init.go /START OMIT/,/END OMIT/

* Printing structs
`Structs` are also printed using `fmt` with:
 - %v to print values
 - %+v to print name & value

.play fundamentals/go_struct_print.go /START OMIT/,/END OMIT/

* Exercise - Create some items
Fill in `cmd/main.go` to create & print some items.

Run your program with
.code exercises/ex_go_run_main.go

.image https://media.giphy.com/media/12uXi1GXBibALC/giphy.gif _ 350 

* Accessing struct fields 
Struct fields are accessed using the `.` operator.
- _Exported_ fields are accessed from any package
- _Unexported_ fields are only available in the package the `struct` is defined in.

.play fundamentals/go_struct_access.go /START OMIT/,/END OMIT/

* Constants & Iota
Constants cannot be modified once they have been declared.
They are declared with the `const` keyword. 

`iota` is used in `const` declarations to simplify definitions of incrementing numbers.
The value of iota starts from 0 in each discreet const block.

.play fundamentals/go_iota.go /START OMIT/,/END OMIT/

* Exercise - Define the OrderStatus constant using iota
.code exercises/ex_order_status.go
Uncomment `models/order_status_test.go` and run it to see it pass.
.code exercises/ex_order_status_test_run.go
.image https://media.giphy.com/media/1sSWWMNnaZLlm/giphy.gif _ 350

* Functions 
Functions in Go are *first* *class* *citizens*, meaning they are primitives. 
They are declared using the `func` keyword. 

.play fundamentals/go_functions.go /START OMIT/,/END OMIT/

* Methods 
Methods allow us to namespace a function to a receiver. 
The function receiver is the implicit first argument of a function. 
Exported struct methods are accessed using the `.` operator. 

.play fundamentals/go_methods.go /START OMIT/,/END OMIT/

* Exercise - List a menu Item
Fill in our `models/item.go` with a `List()` method that will return the menu listing for the item. 
.code exercises/ex_list_item.go
Uncomment `models/item_list_test.go` and run it to see it pass.
.code exercises/ex_list_item_test_run.go

* Pointers 
Pointers allow us to point to the memory space of a value. 
To indicate we are expecting a pointer we use the `*` operator. 
To get the address of value, we use the `&` operator. 

.play fundamentals/go_pointers.go /START OMIT/,/END OMIT/

* When to use pointers?
As a rule of thumb, use pointers over values when:

- You want to modify values.
- You have a large (memory) value that you don't want to keep copying.

.image https://media.giphy.com/media/z9TPacKAkn4CQ/giphy.gif _ 400


* Methods on pointer receivers
Only methods declared on pointer receivers can make changes to instance they are being called.

.play fundamentals/go_pointer_methods.go /START OMIT/,/END OMIT/

* Exercise - Change price of a menu item
Fill in our `models/item.go` with a `ChangePrice` method that will change the price & currency code of a menu item.
.code exercises/ex_change_price_item.go
Uncomment `models/item_change_price_test.go` and run it to see it pass.
.code exercises/ex_change_price_item_test_run.go

.image https://media.giphy.com/media/aRjH97A7rK74c/giphy.gif _ 250

* Arrays
In Go, arrays are:
 
- Fixed length - once an array has allocated its size it cannot be changed
- Fixed type 
- Zero based 
- Accessed by index 

.play fundamentals/go_arrays.go /START OMIT/,/END OMIT/

* Slices
In Go, slices are: 

- Fixed type 
- Dynamically sized 
- Flexible 
- Have a pointer to an underlying array

.play fundamentals/go_slices.go /START OMIT/,/END OMIT/

* Slices cont'd
Great explanation of slices here: 
.link https://blog.golang.org/go-slices-usage-and-internals

A slice is a descriptor of an array segment. It consists of :

- a pointer to the array
- the length of the segment
- its capacity (the maximum length of the segment)

.image images/golang_slice_internals.png _ 500

* Exercise - Define the Order model
Fill in `models/order.go` with the models we have so far: 
.code exercises/ex_order.go
Uncomment `models/order_define_test.go` and run it to see it pass.
.code exercises/ex_order_test_run.go

.image https://media.giphy.com/media/tZaFa1m8UfzXy/giphy.gif _ 300

* Control flow
The `if` statement looks as it does in other languages, except that the `()` are removed and the `{}` are required.
`if` also supports short-hand notation with all variables in statement scope. 

.play fundamentals/go_control_flow.go /START OMIT/,/END OMIT/

* For loops & Ranges
The two most common ways to travers arrays & slices in Go are the `for`-loop and the `range`. The `range` is the most popular. 

.play fundamentals/go_range.go /START OMIT/,/END OMIT/

* Exercise - Implement Order total
Fill in `models/order.go` with a `Total()` method.
This should calculate the order total of the items array by using the `range` operator. 
.code exercises/ex_order_total.go
Uncomment `models/order_total_test.go` and run it to see it pass
.code exercises/ex_order_total_test_run.go

*Note:* It is considered idiomatic in Go to put `Get` into getters names.

.image https://media.giphy.com/media/BMBMMfVxZ2lOM/giphy.gif _ 300

* Multiple return values
Go supports multiple return values. Notice the `()` around them.
This feature is used often in idiomatic Go, for example to return both result and error values from a function.

.play fundamentals/go_multiple_return.go /START OMIT/,/END OMIT/

*Note:* It is good practice in Go to handle error cases first.

* Our in memory database
We will be using an in memory database to save our orders.
This is implemented in `db/db.go`. It exposes the following methods.
.code exercises/ex_db_methods.go
We can use this database by passing a reference of it in the `OrderRepo`.
.code exercises/ex_order_repo_def.go

* Exercise - Implement the OrderRepo
Fill in `repo/order_repo.go` to allow us to save, find and delete orders.
.code exercises/ex_order_repo.go
Uncomment `repo/order_repo_test.go` and run it to see it pass.
.code exercises/ex_order_repo_test_run.go

* Progress checkpoint!
So far, we have:
- Defined the `Item` model
- Defined the `Order` model which contains one or more items
- Implemented `OrderRepo` to save, find & delete orders

Now on to share our orders ... WITH THE WORLD!

.image https://media.giphy.com/media/iBEW5Amz0ztza/giphy.gif _ 300

* REST API design
REST APIs use HTTP methods to present & alter resources.
Resources are presented at intuitive endpoints, which do not contain verbs.
Most REST APIs return JSON responses.

For our Orders REST API, _orders_ are our _resources_.
We will expose the following endpoints:
.code fundamentals/go_orders_api.go

* The Orders REST Server
Uncomment `cmd/server.go`. Let's examine what it does ...

- Creates two items & an order as a testing starting point
- Creates a new `DB` and passes the reference to `OrderRepo`
- Creates a `Handler` and passes it a reference to `OrderRepo`
- Uses `github.com/gorilla/mux` to create a router
- Adds routes to it via `Handlers`
- Starts the router on port `8080`

.image https://media.giphy.com/media/3o7TKAK6dCfEQoTC2A/giphy.gif _ 350

